// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module registers (
        input wire clk,
        input wire rst,

        output logic s_axil_awready,
        input wire s_axil_awvalid,
        input wire [6:0] s_axil_awaddr,
        input wire [2:0] s_axil_awprot,
        output logic s_axil_wready,
        input wire s_axil_wvalid,
        input wire [31:0] s_axil_wdata,
        input wire [3:0]s_axil_wstrb,
        input wire s_axil_bready,
        output logic s_axil_bvalid,
        output logic [1:0] s_axil_bresp,
        output logic s_axil_arready,
        input wire s_axil_arvalid,
        input wire [6:0] s_axil_araddr,
        input wire [2:0] s_axil_arprot,
        input wire s_axil_rready,
        output logic s_axil_rvalid,
        output logic [31:0] s_axil_rdata,
        output logic [1:0] s_axil_rresp,

        input registers_pkg::registers__in_t hwif_in,
        output registers_pkg::registers__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [6:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Max Outstanding Transactions: 2
    logic [1:0] axil_n_in_flight;
    logic axil_prev_was_rd;
    logic axil_arvalid;
    logic [6:0] axil_araddr;
    logic axil_ar_accept;
    logic axil_awvalid;
    logic [6:0] axil_awaddr;
    logic axil_wvalid;
    logic [31:0] axil_wdata;
    logic [3:0] axil_wstrb;
    logic axil_aw_accept;
    logic axil_resp_acked;

    // Transaction request acceptance
    always_ff @(posedge clk) begin
        if(rst) begin
            axil_prev_was_rd <= '0;
            axil_arvalid <= '0;
            axil_araddr <= '0;
            axil_awvalid <= '0;
            axil_awaddr <= '0;
            axil_wvalid <= '0;
            axil_wdata <= '0;
            axil_wstrb <= '0;
            axil_n_in_flight <= '0;
        end else begin
            // AR* acceptance register
            if(axil_ar_accept) begin
                axil_prev_was_rd <= '1;
                axil_arvalid <= '0;
            end
            if(s_axil_arvalid && s_axil_arready) begin
                axil_arvalid <= '1;
                axil_araddr <= s_axil_araddr;
            end

            // AW* & W* acceptance registers
            if(axil_aw_accept) begin
                axil_prev_was_rd <= '0;
                axil_awvalid <= '0;
                axil_wvalid <= '0;
            end
            if(s_axil_awvalid && s_axil_awready) begin
                axil_awvalid <= '1;
                axil_awaddr <= s_axil_awaddr;
            end
            if(s_axil_wvalid && s_axil_wready) begin
                axil_wvalid <= '1;
                axil_wdata <= s_axil_wdata;
                axil_wstrb <= s_axil_wstrb;
            end

            // Keep track of in-flight transactions
            if((axil_ar_accept || axil_aw_accept) && !axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight + 1'b1;
            end else if(!(axil_ar_accept || axil_aw_accept) && axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight - 1'b1;
            end
        end
    end

    always_comb begin
        s_axil_arready = (!axil_arvalid || axil_ar_accept);
        s_axil_awready = (!axil_awvalid || axil_aw_accept);
        s_axil_wready = (!axil_wvalid || axil_aw_accept);
    end

    // Request dispatch
    always_comb begin
        cpuif_wr_data = axil_wdata;
        for(int i=0; i<4; i++) begin
            cpuif_wr_biten[i*8 +: 8] = {8{axil_wstrb[i]}};
        end
        cpuif_req = '0;
        cpuif_req_is_wr = '0;
        cpuif_addr = '0;
        axil_ar_accept = '0;
        axil_aw_accept = '0;

        if(axil_n_in_flight < 2'd2) begin
            // Can safely issue more transactions without overwhelming response buffer
            if(axil_arvalid && !axil_prev_was_rd) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[6:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end else if(axil_awvalid && axil_wvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '1;
                cpuif_addr = {axil_awaddr[6:2], 2'b0};
                if(!cpuif_req_stall_wr) axil_aw_accept = '1;
            end else if(axil_arvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[6:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end
        end
    end


    // AXI4-Lite Response Logic
    struct {
        logic is_wr;
        logic err;
        logic [31:0] rdata;
    } axil_resp_buffer[2];

    logic [1:0] axil_resp_wptr;
    logic [1:0] axil_resp_rptr;

    always_ff @(posedge clk) begin
        if(rst) begin
            for(int i=0; i<2; i++) begin
                axil_resp_buffer[i].is_wr <= '0;
                axil_resp_buffer[i].err <= '0;
                axil_resp_buffer[i].rdata <= '0;
            end
            axil_resp_wptr <= '0;
            axil_resp_rptr <= '0;
        end else begin
            // Store responses in buffer until AXI response channel accepts them
            if(cpuif_rd_ack || cpuif_wr_ack) begin
                if(cpuif_rd_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '0;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_rd_err;
                    axil_resp_buffer[axil_resp_wptr[0:0]].rdata <= cpuif_rd_data;

                end else if(cpuif_wr_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '1;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_wr_err;
                end
                axil_resp_wptr <= axil_resp_wptr + 1'b1;
            end

            // Advance read pointer when acknowledged
            if(axil_resp_acked) begin
                axil_resp_rptr <= axil_resp_rptr + 1'b1;
            end
        end
    end

    always_comb begin
        axil_resp_acked = '0;
        s_axil_bvalid = '0;
        s_axil_rvalid = '0;
        if(axil_resp_rptr != axil_resp_wptr) begin
            if(axil_resp_buffer[axil_resp_rptr[0:0]].is_wr) begin
                s_axil_bvalid = '1;
                if(s_axil_bready) axil_resp_acked = '1;
            end else begin
                s_axil_rvalid = '1;
                if(s_axil_rready) axil_resp_acked = '1;
            end
        end

        s_axil_rdata = axil_resp_buffer[axil_resp_rptr[0:0]].rdata;
        if(axil_resp_buffer[axil_resp_rptr[0:0]].err) begin
            s_axil_bresp = 2'b10;
            s_axil_rresp = 2'b10;
        end else begin
            s_axil_bresp = 2'b00;
            s_axil_rresp = 2'b00;
        end
    end

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic KEY_0;
        logic KEY_1;
        logic KEY_2;
        logic KEY_3;
        logic I_TEXT_0;
        logic I_TEXT_1;
        logic I_TEXT_2;
        logic I_TEXT_3;
        logic ENCRYPTED_0;
        logic ENCRYPTED_1;
        logic ENCRYPTED_2;
        logic ENCRYPTED_3;
        logic DECRYPTED_0;
        logic DECRYPTED_1;
        logic DECRYPTED_2;
        logic DECRYPTED_3;
        logic SYSTEM_ID;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.KEY_0 = cpuif_req_masked & (cpuif_addr == 7'h0);
        decoded_reg_strb.KEY_1 = cpuif_req_masked & (cpuif_addr == 7'h4);
        decoded_reg_strb.KEY_2 = cpuif_req_masked & (cpuif_addr == 7'h8);
        decoded_reg_strb.KEY_3 = cpuif_req_masked & (cpuif_addr == 7'hc);
        decoded_reg_strb.I_TEXT_0 = cpuif_req_masked & (cpuif_addr == 7'h10);
        decoded_reg_strb.I_TEXT_1 = cpuif_req_masked & (cpuif_addr == 7'h14);
        decoded_reg_strb.I_TEXT_2 = cpuif_req_masked & (cpuif_addr == 7'h18);
        decoded_reg_strb.I_TEXT_3 = cpuif_req_masked & (cpuif_addr == 7'h1c);
        decoded_reg_strb.ENCRYPTED_0 = cpuif_req_masked & (cpuif_addr == 7'h20);
        decoded_reg_strb.ENCRYPTED_1 = cpuif_req_masked & (cpuif_addr == 7'h24);
        decoded_reg_strb.ENCRYPTED_2 = cpuif_req_masked & (cpuif_addr == 7'h28);
        decoded_reg_strb.ENCRYPTED_3 = cpuif_req_masked & (cpuif_addr == 7'h2c);
        decoded_reg_strb.DECRYPTED_0 = cpuif_req_masked & (cpuif_addr == 7'h30);
        decoded_reg_strb.DECRYPTED_1 = cpuif_req_masked & (cpuif_addr == 7'h34);
        decoded_reg_strb.DECRYPTED_2 = cpuif_req_masked & (cpuif_addr == 7'h38);
        decoded_reg_strb.DECRYPTED_3 = cpuif_req_masked & (cpuif_addr == 7'h3c);
        decoded_reg_strb.SYSTEM_ID = cpuif_req_masked & (cpuif_addr == 7'h40);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } KEY_0;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } KEY_1;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } KEY_2;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } KEY_3;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } I_TEXT_0;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } I_TEXT_1;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } I_TEXT_2;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } DATA;
        } I_TEXT_3;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } KEY_0;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } KEY_1;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } KEY_2;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } KEY_3;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } I_TEXT_0;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } I_TEXT_1;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } I_TEXT_2;
        struct {
            struct {
                logic [31:0] value;
            } DATA;
        } I_TEXT_3;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: registers.KEY_0.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.KEY_0.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.KEY_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.KEY_0.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.KEY_0.DATA.next = next_c;
        field_combo.KEY_0.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.KEY_0.DATA.value <= 32'h0;
        end else if(field_combo.KEY_0.DATA.load_next) begin
            field_storage.KEY_0.DATA.value <= field_combo.KEY_0.DATA.next;
        end
    end
    assign hwif_out.KEY_0.DATA.value = field_storage.KEY_0.DATA.value;
    // Field: registers.KEY_1.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.KEY_1.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.KEY_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.KEY_1.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.KEY_1.DATA.next = next_c;
        field_combo.KEY_1.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.KEY_1.DATA.value <= 32'h0;
        end else if(field_combo.KEY_1.DATA.load_next) begin
            field_storage.KEY_1.DATA.value <= field_combo.KEY_1.DATA.next;
        end
    end
    assign hwif_out.KEY_1.DATA.value = field_storage.KEY_1.DATA.value;
    // Field: registers.KEY_2.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.KEY_2.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.KEY_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.KEY_2.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.KEY_2.DATA.next = next_c;
        field_combo.KEY_2.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.KEY_2.DATA.value <= 32'h0;
        end else if(field_combo.KEY_2.DATA.load_next) begin
            field_storage.KEY_2.DATA.value <= field_combo.KEY_2.DATA.next;
        end
    end
    assign hwif_out.KEY_2.DATA.value = field_storage.KEY_2.DATA.value;
    // Field: registers.KEY_3.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.KEY_3.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.KEY_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.KEY_3.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.KEY_3.DATA.next = next_c;
        field_combo.KEY_3.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.KEY_3.DATA.value <= 32'h0;
        end else if(field_combo.KEY_3.DATA.load_next) begin
            field_storage.KEY_3.DATA.value <= field_combo.KEY_3.DATA.next;
        end
    end
    assign hwif_out.KEY_3.DATA.value = field_storage.KEY_3.DATA.value;
    // Field: registers.I_TEXT_0.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I_TEXT_0.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I_TEXT_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I_TEXT_0.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I_TEXT_0.DATA.next = next_c;
        field_combo.I_TEXT_0.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I_TEXT_0.DATA.value <= 32'h0;
        end else if(field_combo.I_TEXT_0.DATA.load_next) begin
            field_storage.I_TEXT_0.DATA.value <= field_combo.I_TEXT_0.DATA.next;
        end
    end
    assign hwif_out.I_TEXT_0.DATA.value = field_storage.I_TEXT_0.DATA.value;
    // Field: registers.I_TEXT_1.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I_TEXT_1.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I_TEXT_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I_TEXT_1.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I_TEXT_1.DATA.next = next_c;
        field_combo.I_TEXT_1.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I_TEXT_1.DATA.value <= 32'h0;
        end else if(field_combo.I_TEXT_1.DATA.load_next) begin
            field_storage.I_TEXT_1.DATA.value <= field_combo.I_TEXT_1.DATA.next;
        end
    end
    assign hwif_out.I_TEXT_1.DATA.value = field_storage.I_TEXT_1.DATA.value;
    // Field: registers.I_TEXT_2.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I_TEXT_2.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I_TEXT_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I_TEXT_2.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I_TEXT_2.DATA.next = next_c;
        field_combo.I_TEXT_2.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I_TEXT_2.DATA.value <= 32'h0;
        end else if(field_combo.I_TEXT_2.DATA.load_next) begin
            field_storage.I_TEXT_2.DATA.value <= field_combo.I_TEXT_2.DATA.next;
        end
    end
    assign hwif_out.I_TEXT_2.DATA.value = field_storage.I_TEXT_2.DATA.value;
    // Field: registers.I_TEXT_3.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I_TEXT_3.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I_TEXT_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I_TEXT_3.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I_TEXT_3.DATA.next = next_c;
        field_combo.I_TEXT_3.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.I_TEXT_3.DATA.value <= 32'h0;
        end else if(field_combo.I_TEXT_3.DATA.load_next) begin
            field_storage.I_TEXT_3.DATA.value <= field_combo.I_TEXT_3.DATA.next;
        end
    end
    assign hwif_out.I_TEXT_3.DATA.value = field_storage.I_TEXT_3.DATA.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[17];
    assign readback_array[0][31:0] = (decoded_reg_strb.KEY_0 && !decoded_req_is_wr) ? field_storage.KEY_0.DATA.value : '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.KEY_1 && !decoded_req_is_wr) ? field_storage.KEY_1.DATA.value : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.KEY_2 && !decoded_req_is_wr) ? field_storage.KEY_2.DATA.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.KEY_3 && !decoded_req_is_wr) ? field_storage.KEY_3.DATA.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.I_TEXT_0 && !decoded_req_is_wr) ? field_storage.I_TEXT_0.DATA.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.I_TEXT_1 && !decoded_req_is_wr) ? field_storage.I_TEXT_1.DATA.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.I_TEXT_2 && !decoded_req_is_wr) ? field_storage.I_TEXT_2.DATA.value : '0;
    assign readback_array[7][31:0] = (decoded_reg_strb.I_TEXT_3 && !decoded_req_is_wr) ? field_storage.I_TEXT_3.DATA.value : '0;
    assign readback_array[8][31:0] = (decoded_reg_strb.ENCRYPTED_0 && !decoded_req_is_wr) ? hwif_in.ENCRYPTED_0.DATA.next : '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.ENCRYPTED_1 && !decoded_req_is_wr) ? hwif_in.ENCRYPTED_1.DATA.next : '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.ENCRYPTED_2 && !decoded_req_is_wr) ? hwif_in.ENCRYPTED_2.DATA.next : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.ENCRYPTED_3 && !decoded_req_is_wr) ? hwif_in.ENCRYPTED_3.DATA.next : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.DECRYPTED_0 && !decoded_req_is_wr) ? hwif_in.DECRYPTED_0.DATA.next : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.DECRYPTED_1 && !decoded_req_is_wr) ? hwif_in.DECRYPTED_1.DATA.next : '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.DECRYPTED_2 && !decoded_req_is_wr) ? hwif_in.DECRYPTED_2.DATA.next : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.DECRYPTED_3 && !decoded_req_is_wr) ? hwif_in.DECRYPTED_3.DATA.next : '0;
    assign readback_array[16][15:0] = (decoded_reg_strb.SYSTEM_ID && !decoded_req_is_wr) ? 16'h1234 : '0;
    assign readback_array[16][31:16] = (decoded_reg_strb.SYSTEM_ID && !decoded_req_is_wr) ? 16'habcd : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<17; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
